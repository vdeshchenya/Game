#include "SystemOfParticles.h"#define CUDA_DEBUG#ifdef CUDA_DEBUG#define CUDA_CHECK_ERROR(err)           \if (err != cudaSuccess) {          \printf("Cuda error: %s\n", cudaGetErrorString(err));    \printf("Error in file: %s, line: %i\n", __FILE__, __LINE__);  \}                 \#else#define CUDA_CHECK_ERROR(err)#endifvoid SystemOfParticles::Init(const double &r) {  R2 = r * r;  data = new Particle[1010];  N = 2;  data[0].position = {100, 100};  data[0].speed = {0, 0};  data[1].position = {102, 110};  data[1].speed = {0, 0};}__global__void hrr(Particle *data, int N) {  int i = blockIdx.x * blockDim.x + threadIdx.x;//BlockDim.x = 256  const double &rc = 10;  if (i < N) {    for (int j = 0; j < i; ++j) {      double r2 = (data[i].position.x - data[j].position.x) * (data[i].position.x - data[j].position.x)          + (data[i].position.y - data[j].position.y) * (data[i].position.y - data[j].position.y);      if (r2 < rc * rc) {        double fr = 24 * (pow(r2, -4) - 2 * pow(r2, -7));        data[i].new_acceleration.x = fr * (data[i].position.x - data[j].position.x) / data[i].m;        data[i].new_acceleration.y = fr * (data[i].position.y - data[j].position.y) / data[i].m;      }    }    for (int j = i + 1; j < N; ++j) {      double r2 = (data[i].position.x - data[j].position.x) * (data[i].position.x - data[j].position.x)          + (data[i].position.y - data[j].position.y) * (data[i].position.y - data[j].position.y);      if (r2 < rc * rc) {        double fr = 24 * (pow(r2, -4) - 2 * pow(r2, -7));        data[i].new_acceleration.x = fr * (data[i].position.x - data[j].position.x) / data[i].m;        data[i].new_acceleration.y = fr * (data[i].position.y - data[j].position.y) / data[i].m;      }    }    double dt = 0.5;    double height = 300;    double width = 200;    data[i].speed.x += (dt / 2) * (data[i].new_acceleration.x + data[i].acceleration.x);    data[i].speed.y += (dt / 2) * (data[i].new_acceleration.y + data[i].acceleration.y);    if ((data[i].position.y > height) && data[i].speed.y > 0)      data[i].speed.y *= -1;    if ((data[i].position.x > width) && data[i].speed.x > 0)      data[i].speed.x *= -1;    if ((data[i].position.x < 0) && data[i].speed.x < 0)      data[i].speed.x *= -1;    data[i].acceleration.x = data[i].new_acceleration.x;    data[i].acceleration.y = data[i].new_acceleration.y;  }}void SystemOfParticles::Add(const double &x, const double &y) {  data[N].position = {x, y};  data[N].speed = {0, 0};  data[N].new_acceleration = {0, 0};  data[N].acceleration = {0, 0};  data[N].m = 1;  ++N;}void SystemOfParticles::Step(const double &width, const double &height) {  for (int i = 0; i < N; ++i) {    data[i].position += dt * data[i].speed + (dt / 2) * dt * data[i].acceleration;    data[i].new_acceleration = {0, -g};    data[i].new_acceleration -= data[i].b * data[i].speed;  }  Particle *data1;  CUDA_CHECK_ERROR(cudaMalloc(&data1, 1010 * sizeof(Particle)));  CUDA_CHECK_ERROR(cudaMemcpy(data1, &data[0], 1010 * sizeof(Particle), cudaMemcpyHostToDevice));  hrr << < 128, 128 >> > (data1, N);  CUDA_CHECK_ERROR(cudaMemcpy(&data[0], data1, 1010 * sizeof(Particle), cudaMemcpyDeviceToHost));  cudaFree(data1);}const Vector &SystemOfParticles::GetIPosition(const int &i) const { return data[i].position; }const size_t &SystemOfParticles::GetNumbersOfParticles() const { return N; }